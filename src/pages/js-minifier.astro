---
export const prerender = true;
import Layout from "../layouts/Layout.astro";
import Tools from "../components/tools.astro";
---

<Layout title="JavaScript Minifier | 10mblogs">
  <main class="min-h-screen w-full">
    <h1
      class="my-5 mx-auto font-medium text-xl md:text-3xl text-center text-blue-700"
    >
      JavaScript Minifier
    </h1>
    <div class="container my-10 w-[90%] md:w-2/3 mx-auto">
      <div class="flex flex-col md:flex-row w-full gap-3">
        <!-- input box -->
        <div class="w-full md:w-1/2">
          <h1
            class="my-5 mx-auto font-medium md:text-xl text-center text-blue-300"
          >
            Input
          </h1>
          <textarea
            name="input-box"
            class="w-full border border-blue-400 p-3 rounded-md shadow focus:border-blue-600 placeholder:text-blue-300 outline-none resize-none max-h-[400px]"
            id="input-box"
            cols="30"
            rows="20"
            placeholder="Paste your content..."></textarea>
          <div
            class="mt-3 inline-flex items-center rounded-md bg-blue-50 px-2 py-1 font-medium text-blue-700 ring-1 ring-inset ring-blue-700/10"
          >
            Total Word:&nbsp;<span id="count-show">0</span>
          </div>
        </div>

        <!-- output box -->
        <div class="w-full md:w-1/2">
          <h1
            class="my-5 mx-auto font-medium md:text-xl text-center text-blue-300"
          >
            Output
          </h1>
          <textarea
            name="output-box"
            class="w-full border border-blue-400 p-3 rounded-md shadow focus:border-blue-600 placeholder:text-blue-300 outline-none resize-none max-h-[400px]"
            id="output-box"
            cols="30"
            rows="20"
            placeholder="Output will be shown here..."
            disabled></textarea>

          <button
            id="copy"
            class="mt-3 px-5 py-2 rounded-full bg-blue-50 text-blue-700 ring-1 ring-inset ring-blue-700 transition delay-75 hover:bg-blue-700 hover:text-blue-50"
          >
            Copy Text
          </button>
        </div>
      </div>
    </div>

    <Tools />

    <!-- Notification  -->
    <div
      id="notification"
      class="bg-green-500 hidden text-white p-4 fixed bottom-0 right-0 m-4 rounded-lg shadow-lg transition delay-75 ease-in-out"
    >
      <div class="flex items-center">
        <svg
          class="w-6 h-6 mr-2"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M5 13l4 4L19 7"></path>
        </svg>
        <p>Text Copied Successfully</p>
      </div>
    </div>
  </main>
</Layout>
<script async defer>
  const input_text = document.querySelector("#input-box");
  const output_text = document.querySelector("#output-box");
  let count_show = document.querySelector("#count-show");
  let copy = document.querySelector("#copy");
  let notification = document.querySelector("#notification");

  const count = (e) => {
    // Use setTimeout to ensure that the value is updated after the paste operation
    setTimeout(() => {
      let value = e.target.value;
      value = value.replace(/[\s\n]/g, "");
      count_show.innerText = value.length;
    }, 10);
  };

  const minify = (e) => {
    // Use setTimeout to ensure that the value is updated after the paste operation
    setTimeout(() => {
      let value = e.target.value;
      value = value
        .replace(/\/\/.*$/gm, "") // Replace consecutive spaces with a single space
        .replace(/\/\/[^\n]*\n/g, "\n") // Remove single-line comments
        .replace(/\/\*[\s\S]*?\*\//g, "") // Remove multi-line comments
        .replace(/\s*([{}()[\]=.,;:])\s*/g, "$1") // Remove spaces around delimiters
        .trim();

      output_text.innerText += value;
    }, 10);
  };

  input_text.addEventListener("paste", (e) => {
    count(e);
    minify(e);
  });
  input_text.addEventListener("keydown", (e) => {
    count(e);
    minify(e);
  });

  output_text.addEventListener("keydown", (e) => {});

  copy.addEventListener("click", async () => {
    await navigator.clipboard.writeText(output_text.value);
    notification.classList.remove("hidden");
    setTimeout(() => {
      notification.classList.add("hidden");
    }, 2000);
  });
</script>
